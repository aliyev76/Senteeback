import express from 'express';
import bcrypt from 'bcrypt';
import crypto from 'crypto';
import jwt from 'jsonwebtoken';
import { Op } from 'sequelize';
import rateLimit from 'express-rate-limit';
import { check, validationResult } from 'express-validator';
import helmet from 'helmet';
import User from '../models/User.js';
import { sendRegistrationEmail, sendPasswordResetEmail, sendContactEmail } from '../services/emailService.js';

const router = express.Router();
router.use(helmet()); // Add secure HTTP headers

// ==========================
// Rate Limiter
// ==========================
const rateLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 5, // Limit each IP to 5 requests per window
  message: 'Too many requests. Please try again after 15 minutes.',
});

// ==========================
// Role Middleware
// ==========================
const requireRole = (role) => (req, res, next) => {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) return res.status(401).json({ error: 'Unauthorized' });

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    if (decoded.role !== role) {
      return res.status(403).json({ error: 'Forbidden: Insufficient privileges' });
    }
    req.user = decoded;
    next();
  } catch (error) {
    return res.status(401).json({ error: 'Unauthorized' });
  }
};

// ==========================
// Contact Us Endpoint
// ==========================
router.post('/contact', async (req, res, next) => {
  const { name, email, message } = req.body;
  try {
    if (!name || !email || !message) {
      throw new Error('All fields are required.');
    }
    await sendContactEmail(name, email, message);
    res.status(200).json({ message: 'Message sent successfully!' });
  } catch (error) {
    next(error);
  }
});

// ==========================
// Forgot Password
// ==========================
router.post('/forgot-password', async (req, res, next) => {
  const { email } = req.body;
  try {
    const user = await User.findOne({ where: { email } });

    if (!user) {
      console.log('Forgot Password: Email not found:', email);
      return res.status(200).json({
        emailExists: false,
        message: 'If the email exists, a reset link has been sent.',
      });
    }

    const resetToken = crypto.randomBytes(32).toString('hex');
    const hashedToken = crypto.createHash('sha256').update(resetToken).digest('hex');
    user.resetToken = hashedToken;
    user.resetTokenExpiry = Date.now() + 3600000; // 1 hour
    await user.save();

    const resetLink = `${process.env.FRONTEND_URL}/reset_password/${resetToken}`;
    await sendPasswordResetEmail(user.email, resetLink);

    console.log('Forgot Password: Reset link sent to:', email);
    res.status(200).json({
      emailExists: true,
      message: 'If the email exists, a reset link has been sent.',
    });
  } catch (error) {
    next(error);
  }
});

// ==========================
// Reset Password
// ==========================
router.post(
  '/reset-password',
  [
    check('token').notEmpty().withMessage('Token is required'),
    check('newPassword')
      .isLength({ min: 8 })
      .matches(/[A-Z]/)
      .matches(/[a-z]/)
      .matches(/\d/),
  ],
  async (req, res, next) => {
    try {
      const { token, newPassword } = req.body;
      const hashedToken = crypto.createHash('sha256').update(token).digest('hex');
      const user = await User.findOne({
        where: { resetToken: hashedToken, resetTokenExpiry: { [Op.gt]: Date.now() } },
      });

      if (!user) {
        console.log('Reset Password: Invalid or expired token');
        return res.status(400).json({ error: 'Invalid or expired token.' });
      }

      user.password = await bcrypt.hash(newPassword, 10);
      user.resetToken = null;
      user.resetTokenExpiry = null;
      await user.save();

      console.log('Reset Password: Password reset successfully for:', user.email);
      res.status(200).json({ message: 'Password reset successfully.' });
    } catch (error) {
      next(error);
    }
  }
);

// ==========================
// Register
// ==========================
router.post(
  '/register',
  rateLimiter,
  [
    check('username').notEmpty(),
    check('email').isEmail(),
    check('password').isLength({ min: 8 }),
    check('phone').notEmpty(),
    check('address').notEmpty(),
  ],
  async (req, res, next) => {
    try {
      const { username, email, password, phone, address, role } = req.body;
      const existingUser = await User.findOne({ where: { email } });
      if (existingUser) throw new Error('Email already exists.');

      const hashedPassword = await bcrypt.hash(password, 10);
      const assignedRole = role && ['user', 'admin'].includes(role) ? role : 'user';
      const user = await User.create({ username, email, password: hashedPassword, phone, address, role: assignedRole });

      await sendRegistrationEmail(email, username);
      res.status(201).json({ message: 'User registered successfully.', user });
    } catch (error) {
      next(error);
    }
  }
);

// ==========================
// Login
// ==========================
router.post(
  '/login',
  rateLimiter,
  [check('email').isEmail(), check('password').notEmpty()],
  async (req, res, next) => {
    try {
      const { email, password } = req.body;
      const user = await User.findOne({ where: { email } });

      if (!user) {
        console.log('Login: Email not found:', email);
        return res.status(401).json({ error: 'Invalid email or password.' });
      }

      const isMatch = await bcrypt.compare(password, user.password);
      console.log('Login: Password match:', isMatch);
      if (!isMatch) {
        return res.status(401).json({ error: 'Invalid email or password.' });
      }

      const token = jwt.sign({ id: user.id, role: user.role }, process.env.JWT_SECRET, { expiresIn: '1h' });
      res.json({ message: 'Login successful.', token, user });
    } catch (error) {
      next(error);
    }
  }
);

// ==========================
// Centralized Error Handler
// ==========================
router.use((err, req, res, next) => {
  console.error('Error:', err.message);
  res.status(err.status || 500).json({ error: err.message || 'Internal Server Error' });
});

export default router;

